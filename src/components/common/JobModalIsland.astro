---
// Astro Island: JobModalIsland
// Props: jobs (array), selectedIndex (number|null), onClose (function)
const {
  jobs = [],
  onClose = () => {},
  selectedIndex = null,
} = Astro.props;
import type { Job } from '../../pages/resume/jobs';

const job: Job | null =
  selectedIndex !== null ? jobs[selectedIndex] : null;
---

{
  selectedIndex !== null && job && (
    <div
      class="fixed inset-0 z-50 flex items-center justify-center px-4"
      id="job-modal"
    >
      <div
        class="bg-opacity-40 absolute inset-0 bg-black"
        id="job-modal-overlay"
        onclick={onClose}
      />
      <div class="relative z-10 w-full max-w-2xl">
        <div
          aria-labelledby="job-modal-title"
          aria-modal="true"
          class="rounded-lg bg-white p-6 shadow-lg dark:bg-gray-950"
          role="dialog"
        >
          <h3 class="text-xl font-semibold" id="job-modal-title">
            {job.title}
          </h3>
          <p class="text-sm text-gray-600 dark:text-gray-300">
            {job.company} â€¢ {job.startDate} - {job.endDate}
          </p>
          <p class="mt-3 text-sm">{job.description}</p>
          {job.accomplishments.length > 0 && (
            <>
              <h4 class="mt-4 text-sm font-medium">
                Key accomplishments
              </h4>
              <ul class="mt-2 list-inside list-disc text-sm">
                {job.accomplishments.map((a) => (
                  <li>{a}</li>
                ))}
              </ul>
            </>
          )}
          {job.skills.length > 0 && (
            <>
              <h4 class="mt-4 text-sm font-medium">Skills</h4>
              <ul class="mt-2 flex flex-wrap gap-2">
                {job.skills.map((s) => (
                  <li class="rounded bg-gray-100 px-2 py-1 text-xs dark:bg-gray-800">
                    {s}
                  </li>
                ))}
              </ul>
            </>
          )}
          <div class="mt-6 flex justify-end">
            <button
              aria-label="Close"
              class="rounded bg-gray-200 px-4 py-2 hover:bg-gray-300 dark:bg-gray-800"
              onclick={onClose}
            >
              Close
            </button>
          </div>
        </div>
      </div>
    </div>
  )
}
<script>
  // Focus trap and ESC close logic
  export default () => {
    if (typeof window === 'undefined') return;
    const handleKeyDown = (e: KeyboardEvent) => {
      //   if (e.key === 'Escape') onClose();
      // Focus trap logic can be added here
    };
    window.addEventListener('keydown', handleKeyDown);
    return () =>
      window.removeEventListener('keydown', handleKeyDown);
  };
</script>
