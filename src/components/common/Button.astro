---
import type { HTMLTag, Polymorphic } from 'astro/types';

import classNames from 'classnames';

type Props<Tag extends HTMLTag> = Polymorphic<{
  as: Tag;
}> & {
  class?: string;
  href?: string;
  size?: 'lg' | 'md' | 'sm';
  type?: 'button' | 'reset' | 'submit';
  variant?: 'danger' | 'outline' | 'primary' | 'secondary';
};

const {
  as = 'button', // Supports <a> or <button> elements
  class: customClass = '', // Allow additional classes
  href, // Required if using <a>
  size = 'md', // 'sm', 'md', 'lg'
  type = 'button', // Button type (e.g., submit, reset)
  variant = 'primary', // 'primary', 'secondary', etc.
  ...props // Spread remaining attributes
} = Astro.props as Props<HTMLTag>;

const baseClass = `
  inline-flex items-center justify-center
  font-medium rounded-sm transition-colors duration-300 ease-in-out
  focus:outline-none focus-visible:ring-2
  focus-visible:ring-offset-2
`;

const variantClass = {
  danger: 'bg-red-500 text-white hover:bg-red-600',
  outline:
    'border border-gray-400 text-gray-800 hover:bg-gray-100',
  primary: 'bg-primary-600 text-white hover:bg-primary-700',
  secondary:
    'bg-gray-900 text-gray-100 hover:bg-gray-950 border border-gray-600',
}[variant];

const sizeClass = {
  lg: 'px-8 py-5 text-lg',
  md: 'px-6 py-3 text-base',
  sm: 'px-3 py-1.5 text-sm',
}[size];

const combinedClass = classNames(
  baseClass,
  variantClass,
  sizeClass,
  customClass
);

const isLink = as === 'a' || !!href;
---

{
  isLink ? (
    <a class={combinedClass} href={href} {...props}>
      <slot />
    </a>
  ) : (
    <button class={combinedClass} type={type} {...props}>
      <slot />
    </button>
  )
}
