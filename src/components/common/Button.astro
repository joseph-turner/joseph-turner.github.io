---
// Props for flexibility
const {
  as = 'button', // Supports <a> or <button> elements
  href, // Required if using <a>
  type = 'button', // Button type (e.g., submit, reset)
  variant = 'primary', // 'primary', 'secondary', etc.
  size = 'md', // 'sm', 'md', 'lg'
  class: customClass = '', // Allow additional classes
  ...props // Spread remaining attributes
} = Astro.props;

const baseClass = `
  inline-flex items-center justify-center
  font-medium rounded-2xl transition-colors
  focus:outline-none focus-visible:ring-2
  focus-visible:ring-offset-2
`;

const variantClass = {
  primary: 'bg-blue-500 text-white hover:bg-blue-600',
  secondary: 'bg-gray-200 text-gray-800 hover:bg-gray-300',
  outline:
    'border border-gray-400 text-gray-800 hover:bg-gray-100',
  danger: 'bg-red-500 text-white hover:bg-red-600',
}[variant];

const sizeClass = {
  sm: 'px-3 py-1.5 text-sm',
  md: 'px-4 py-2 text-base',
  lg: 'px-6 py-3 text-lg',
}[size];

const combinedClass = `${baseClass} ${variantClass} ${sizeClass} ${customClass}`;
---

{
  as === 'a' ? (
    <a href={href} class={combinedClass} {...props}>
      <slot />
    </a>
  ) : (
    <button type={type} class={combinedClass} {...props}>
      <slot />
    </button>
  )
}
