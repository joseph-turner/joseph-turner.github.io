---
import classNames from 'classnames';

import Icon from '../Icon.astro';

const iconClasses = classNames('w-4 h-4');
const themeBtnBase =
  'rounded-full p-2 transition-colors focus:outline-none focus-visible:ring-2 focus-visible:ring-primary-300 focus-visible:ring-offset-2 cursor-pointer hover:bg-primary-400/30 hover:text-white';
---

<theme-control
  class="flex gap-1 rounded-full bg-primary-400/30 dark:bg-gray-900"
>
  <button
    aria-label="Set system Mode"
    aria-pressed="false"
    class={classNames(themeBtnBase)}
    id="systemButton"
    tabindex="0"
  >
    <Icon className={iconClasses} name="computer-line" />
  </button>
  <button
    aria-label="Set Light Mode"
    aria-pressed="false"
    class={classNames(themeBtnBase)}
    id="lightButton"
    tabindex="0"
  >
    <Icon className={iconClasses} name="sun-fill" />
  </button>
  <button
    aria-label="Set Dark Mode"
    aria-pressed="false"
    class={classNames(themeBtnBase)}
    id="darkButton"
    tabindex="0"
  >
    <Icon className={iconClasses} name="moon-fill" />
  </button>
</theme-control>

<style></style>

<script>
  class ThemeControl extends HTMLElement {
    connectedCallback() {
      this.setActiveIcon();
      this.querySelector('#systemButton')?.addEventListener(
        'click',
        () => this.updateTheme('system')
      );

      this.querySelector('#darkButton')?.addEventListener(
        'click',
        () => this.updateTheme('dark')
      );

      this.querySelector('#lightButton')?.addEventListener(
        'click',
        () => this.updateTheme('light')
      );
    }

    setActiveIcon() {
      const buttons = this.querySelectorAll('button');
      const theme = localStorage.theme || 'system';
      buttons.forEach((button) => {
        button.setAttribute('aria-pressed', 'false');
        button.classList.remove(
          'bg-primary-200',
          'dark:bg-gray-800',
          'text-white',
          'shadow-md',
          'cursor-default'
        );
        button.classList.add(
          'cursor-pointer',
          'hover:bg-primary-400/30',
          'hover:text-white'
        );
      });
      const activeButton = this.querySelector(`#${theme}Button`);
      if (activeButton) {
        activeButton.setAttribute('aria-pressed', 'true');
        activeButton.classList.add(
          'bg-primary-200',
          'dark:bg-gray-800',
          'text-white',
          'shadow-md',
          'cursor-default'
        );
        activeButton.classList.remove(
          'cursor-pointer',
          'hover:bg-primary-400/30',
          'hover:text-white'
        );
      }
    }

    updateTheme(theme?: string) {
      if (theme !== 'system') {
        document.documentElement.classList.toggle(
          'dark',
          theme === 'dark'
        );
        localStorage.theme = theme;
        this.setActiveIcon();
        return;
      }
      localStorage.removeItem('theme');
      document.documentElement.classList.toggle(
        'dark',
        localStorage.theme === 'dark' ||
          (!('theme' in localStorage) &&
            window.matchMedia('(prefers-color-scheme: dark)')
              .matches)
      );
      this.setActiveIcon();
    }
  }

  customElements.define('theme-control', ThemeControl);
</script>
